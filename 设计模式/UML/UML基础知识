# UML基础知识

## 类之间的六种关系

* 泛化

  可以简单理解为继承关系

  ```java
  public class A {...}
  public class B extends A {...}
  ```

  

* 实现

  一般是指接口和实现类之间的关系

  ```java
  public interface A {...}
  public class B implements A {...}
  ```

* 聚合

  是一种包含关系，A类对象包含B类对象，B类对象的生命周期可以不依赖A类对象的生命周期，也就是说可以单独销毁A类对象而不影响B对象，比如课程与学生之间的关系。

  ```java
  public class A{
      private B b;
      public A(B ){
          this.b = b;
      }
  }
  ```

* 组合

  也是一种包含关系。A类对象包含B类对象，B类对象的生命周期依赖A类对象的生命周期，B类对象不可单独存在，比如鸟与翅膀之间的关系。
  
  ```java
  public class A {
      private B b;
      public A(){
          this.b = new B();
      }
  }
  ```
  
* 关联

  是一种非常脆弱的关系，包含聚合、组合两种关系。具体到代码层面，如果B类对象是A类的成员变量，那B类和A类就是关联关系。

  ```java
  public class A {
      private B b;
      public A(B b) {
          this.b = b;
      }
  }
  或者
      public class A {
          private B b;
          public A(){
              this.b = new B();
          }
      }
  ```

* 依赖

  是一种比关联更加脆弱的关系，包含关联关系。不管是B类对象是A类对象的成员变量，还是A类的方法使用B类对象作为参数或者返回值、局部变量，只要B类对象和A类对象有任何使用关系，我们都称它们有依赖关系。

  ```java
  public class A {
      private B b;
      public A(B b){
          this.b = b;
      }
  }
  或者
      public class A{
          private B b;
          public A(){
              this.b = new B();
          }
      }
  或者
      public class A{
          public void func(B b){...}
      }
  ```

  